# arguments
platform = linux/x64



# paths home
project_home       = ..
bin_dir            = $(project_home)/lib/$(platform)
object_dir         = $(project_home)/.objs



# includes of jsoncpp headers
jsoncpp_inc_path   = $(project_home)/inc
jsoncpp_includes   = -I$(jsoncpp_inc_path)

# all includes that jsoncpp solution needs
includes           = $(jsoncpp_includes)



# source files of jsoncpp project
jsoncpp_src_path   = $(project_home)/src
jsoncpp_source     = $(filter %.cpp, $(shell find $(jsoncpp_src_path) -depth -name "*.cpp"))



# objects of jsoncpp solution
jsoncpp_objects    = $(jsoncpp_source:$(project_home)%.cpp=$(object_dir)%.o)



# local depends librarys
depend_libs        = 



# output librarys
output_lib         = $(bin_dir)/libjsoncpp.so



# my g++ not support nullptr and 64bits
# so no -m64, and add a macro -Dnullptr=0

# build flags for objects
build_obj_flags    = -std=c++11 -g -Wall -O1 -pipe -fPIC

# build flags for execution
build_exec_flags   = $(build_obj_flags)

# build flags for dynamic link librarys
build_so_flags     = -shared



# build targets
targets            = jsoncpp

# let 'build' be default target, build all targets
build     : $(targets)

jsoncpp   : $(jsoncpp_objects)
	@echo
	@echo "@@@@@  start making jsoncpp  @@@@@"
	g++ $(build_so_flags) -o $(output_lib) $^ $(depend_libs)
	@echo "@@@@@  make jsoncpp success  @@@@@"
	@echo

# build all objects
$(object_dir)/%.o:$(project_home)/%.cpp
	@dir=`dirname $@`;      \
    if [ ! -d $$dir ]; then \
        mkdir -p $$dir;     \
    fi
	g++ -c $(build_obj_flags) $(includes) -o $@ $<

clean     :
	rm -rf $(object_dir) $(output_lib)

rebuild   : clean build
